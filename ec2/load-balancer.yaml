#AWSTemplateFormatVersion: 2010-09-09
#Description: ---
#Metadata:

Parameters:

  ApplicationName:
    Type: String

  LoadBalancerScheme:
    AllowedValues:
      - internal
      - internet-facing
    Default: internet-facing
    Type: String

  Sequence:
    Default: 1
    Type: String

  Stage:
    Type: String

  SubnetIdList:
    Type: String

  Type:
    Default: application
    Type: String

#Mappings:

Conditions:

  CreateHttpListener: !Equals [ !Ref CertificateArn, none ]
  CreateHttpsListener: !Not [ !Equals [ !Ref CertificateArn, none ] ]
  CreateLoadBalancer: !Equals [ !Ref LoadBalancerArn, none ]

Resources:

#1) Load Balancer
  LoadBalancer:
    Condition: CreateLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${ApplicationName}-${Stage}-lb-${Sequence}
      Scheme: !Ref LoadBalancerScheme
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: !Split [ ',', !Ref SubnetIdList ]
      Type: !Ref Type

#2) Load Balancer Listener
  LoadBalancerHttpListener:
    Condition: CreateHttpListener
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - FixedResponseConfig:
            StatusCode: 502
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  #      SslPolicy: !Ref SslPolicy

  LoadBalancerHttpsListener:
    Condition: CreateHttpsListener
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - FixedResponseConfig:
            StatusCode: 502
      LoadBalancerArn: !If [ CreateLoadBalancer, !Ref LoadBalancer, !Ref LoadBalancerArn ]
      Port: 443
      Protocol: HTTPS
  #      SslPolicy: !Ref SslPolicy

  LoadBalancerHttpsRedirectListener:
    Condition: CreateHttpsListener
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Protocol: HTTPS
            StatusCode: HTTP_301
            Port: 443
          Type: redirect
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
#      SslPolicy: !Ref SslPolicy

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ApplicationName}-${Stage}-lb-${Sequence}-security-group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !If [ CreateHttpListener, 80, 443 ]
          ToPort: !If [ CreateHttpListener, 80, 443 ]
          CidrIp: !If [ HasPublicIpAddress, '0.0.0.0/0', !Ref VpcCidr ]
      VpcId: !Ref VpcId

Outputs:

  LoadBalancerArn:
    Value: !If [ CreateLoadBalancer, !Ref LoadBalancer, !Ref LoadBalancerArn ]

  LoadBalancerListenerArn:
    Value: !If [ CreateHttpsListener, !Ref LoadBalancerHttpsListener, !Ref LoadBalancerHttpListener ]

  SecurityGroup:
    Value: !Ref SecurityGroup
